- name: FIO-S3 benchmarking
  hosts: all
  collections:
  - purestorage.flashblade
  vars_prompt:
  - name: "input_source"
    prompt: "Would you like to test against a FlashBlade or provide your own connection information. Valid options: [flashblade|custom]"
    default: "flashblade"
    private: no
  vars:
    # S3 Target to test: endpoint, bucket, object size, and compressibility.
    # Update these variables for your tests.
    s3endpoint: "10.62.64.200"
    object_size: "18m"
    compress_percentage: 40
    # Defaults for S3 account/user/bucket, no change necessary.
    s3bucket: "fiobench"
    s3account: "default"
    s3user: "fio"
  vars_files:
    # FlashBlade login inforation (with token) stored in a separate file (not in version control).
    # This file should include variables: FB_MGMTVIP, FB_DATAVIP, and FB_TOKEN
    - "{{ input_source }}.yaml"
  tasks:
  - name: Ensure python modules installed
    pip:
      name: "{{ item }}"
    loop:
      - docker
      - purity_fb
  - name: Create s3 account
    when: input_source == "flashblade"
    delegate_to: localhost
    run_once: true
    purefb_s3acc:
      name: "{{ s3account }}"
      fb_url: "{{ FB_MGMTVIP }}"
      api_token: "{{ FB_TOKEN }}"
  - name: Create s3 user
    when: input_source == "flashblade"
    delegate_to: localhost
    run_once: true
    purefb_s3user:
      name:  "{{ s3user }}"
      account: "{{ s3account }}"
      fb_url: "{{ FB_MGMTVIP }}"
      api_token: "{{ FB_TOKEN }}"
    register: user_info
  - name: Set Access keys
    when: input_source == "flashblade"
    set_fact:
      s3_access_key: "{{ user_info.s3user_info.fb_s3user.access_id }}"
      s3_secret_key: "{{ user_info.s3user_info.fb_s3user.access_key }}"
  - name: Create Bucket
    when: input_source == "flashblade"
    delegate_to: localhost
    run_once: true
    purefb_bucket:
      name: "{{ s3bucket }}"
      account: "{{ s3account }}"
      fb_url: "{{ FB_MGMTVIP }}"
      api_token: "{{ FB_TOKEN }}"
  - name: Pull docker image
    docker_image:
      name: "joshuarobinson/fio-s3"
      state: present
      source: pull
  - name: Push fio config file
    copy:
      src: fb.fio
      dest: /tmp/fb.fio
  - name: fio write data to S3 in parallel
    docker_container:
      name: fio-s3-write
      image: joshuarobinson/fio-s3
      command: "/fio/fio /tmp/fb.fio --section=write_s3"
      state: started
      detach: no
      auto_remove: yes
      volumes:
        - /tmp:/tmp
      env:
        AWS_ACCESS_KEY={{ s3_access_key }}
        AWS_SECRET_ACCESS_KEY={{ s3_secret_key }}
        S3ENDPOINT={{ s3endpoint }}
        BUCKET={{ s3bucket }}
        OBJSIZE={{ object_size }}
        COMPRESS_PCT={{ compress_percentage }}
  - name: fio read all written data on S3
    docker_container:
      name: fio-s3-read
      image: joshuarobinson/fio-s3
      command: "/fio/fio /tmp/fb.fio --section=read_s3"
      state: started
      detach: no
      auto_remove: yes
      volumes:
        - /tmp:/tmp
      env:
        AWS_ACCESS_KEY={{ s3_access_key }}
        AWS_SECRET_ACCESS_KEY={{ s3_secret_key }}
        S3ENDPOINT={{ s3endpoint }}
        BUCKET={{ s3bucket }}
        OBJSIZE={{ object_size }}
  - name: fio cleanup data on S3
    docker_container:
      name: fio-s3-clean
      image: joshuarobinson/fio-s3
      command: "/fio/fio /tmp/fb.fio --section=trim_s3"
      state: started
      detach: no
      auto_remove: yes
      volumes:
        - /tmp:/tmp
      env:
        AWS_ACCESS_KEY={{ s3_access_key }}
        AWS_SECRET_ACCESS_KEY={{ s3_secret_key }}
        S3ENDPOINT={{ s3endpoint }}
        BUCKET={{ s3bucket }}
        OBJSIZE={{ object_size }}
  - name: Eradicate Bucket
    when: input_source == "flashblade"
    delegate_to: localhost
    run_once: true
    purefb_bucket:
      name: "{{ s3bucket }}"
      account: "{{ s3account }}"
      fb_url: "{{ FB_MGMTVIP }}"
      api_token: "{{ FB_TOKEN }}"
      eradicate: yes
      state: absent
  - name: Delete s3 user
    when: input_source == "flashblade"
    delegate_to: localhost
    run_once: true
    purefb_s3user:
      name:  "{{ s3user }}"
      account: "{{ s3account }}"
      fb_url: "{{ FB_MGMTVIP }}"
      api_token: "{{ FB_TOKEN }}"
      state: absent
